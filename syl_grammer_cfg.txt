

FIRST
{empty: {empty}, ID: {ID}, ;: {;}, {: {{}, }: {}}, proc: {proc}, record: {record}, int: {int}, real: {real}, char: {char}, CONST: {CONST}, STRING: {STRING}, +: {+}, *: {*}, (: {(}, ): {)}, if: {if}, while: {while}, do: {do}, then: {then}, else: {else}, or: {or}, and: {and}, not: {not}, true: {true}, false: {false}, <=: {<=}, <: {<}, !=: {!=}, >: {>}, >=: {>=}, call: {call}, ，: {，}, [: {[}, ]: {]}, =: {=}, ==: {==}, P': {proc, call, record, int, while, real, if, char, ID, empty}, P: {proc, record, call, int, while, real, if, char, ID, empty}, D: {proc, int, record, real, char}, T: {real, int, char}, X: {real, int, char}, C: {[, empty}, S: {while, ID, call, if}, L: {ID}, E: {ID, STRING, CONST, (}, G: {ID, STRING, CONST, (}, F: {ID, STRING, CONST, (}, B: {STRING, ID, CONST, not, false, true, (}, K: {STRING, ID, CONST, not, false, true, (}, H: {STRING, ID, CONST, not, false, true, (}, relop: {<=, ==, !=, >=, <, >}, Elist: {ID, STRING, CONST, (}}

FOLLOW
{P': {$}, P: {$, }}, D: {proc, int, record, call, while, real, $, if, ID, }, char}, T: {ID}, X: {ID, [}, C: {ID}, S: {proc, int, record, call, while, real, $, if, ID, }, char}, L: {and, =, <=, ==, +, !=, or, ], then, do, >=, [, >, *, ), <, ;, ，}, E: {and, <=, ==, +, !=, or, ], then, do, >=, >, ), <, ;, ，}, G: {and, <=, ==, +, !=, or, ], then, do, >=, >, *, ), <, ;, ，}, F: {and, <=, ==, +, !=, or, ], then, do, >=, >, *, ), <, ;, ，}, B: {or, then, do, )}, K: {and, or, then, do, )}, H: {and, or, then, do, )}, relop: {ID, (, CONST, STRING}, Elist: {，, )}}

SELECT
{P' -> P: {proc, int, record, call, while, real, $, if, ID, char}, P -> D P: {proc, int, record, real, char}, P -> S P: {while, ID, call, if}, P -> empty: {$, }}, D -> T ID ;: {real, int, char}, D -> proc ID { P }: {proc}, D -> record ID { P }: {record}, T -> X C: {real, int, char}, X -> int: {int}, X -> real: {real}, X -> char: {char}, C -> [ CONST ] C: {[}, C -> empty: {ID}, S -> ID = E ;: {ID}, S -> L = E ;: {ID}, L -> ID [ E ]: {ID}, L -> L [ E ]: {ID}, E -> E + G: {ID, (, CONST, STRING}, E -> G: {ID, (, CONST, STRING}, G -> G * F: {ID, (, CONST, STRING}, G -> F: {ID, (, CONST, STRING}, F -> ( E ): {(}, F -> ID: {ID}, F -> CONST: {CONST}, F -> STRING: {STRING}, F -> L: {ID}, S -> if B then { P }: {if}, S -> if B then { P } else { P }: {if}, S -> while B do { P }: {while}, B -> B or K: {(, CONST, not, ID, false, true, STRING}, B -> K: {(, CONST, not, ID, false, true, STRING}, K -> K and H: {(, CONST, not, ID, false, true, STRING}, K -> H: {(, CONST, not, ID, false, true, STRING}, H -> not H: {not}, H -> ( B ): {(}, H -> E relop E: {ID, (, CONST, STRING}, H -> true: {true}, H -> false: {false}, relop -> <: {<}, relop -> <=: {<=}, relop -> ==: {==}, relop -> !=: {!=}, relop -> >: {>}, relop -> >=: {>=}, S -> call ID ( Elist ) ;: {call}, Elist -> Elist ， E: {ID, (, CONST, STRING}, Elist -> E: {ID, (, CONST, STRING}}