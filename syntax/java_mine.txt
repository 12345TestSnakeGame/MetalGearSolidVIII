S' S CLASS P P' PROCESS PARAMS PARAMS' DECLARE DECLARES RECORD DECLARE_NO_VALUE DECLARE_VALUE ASSIGN TYPE BASIC_TYPE LIST_TYPE ASSIGNMENT EXPRESSION EXPRESSION1 EXPRESSION2 V_ID ID1 STATEMENT_BOOL STATEMENT_BOOL' STATEMENT_BOOL'' IF ELSE WHILE FOR DO_WHILE CALL CLASS_QUALIFIER PROCESS_QUALIFIER
ID { } ( ) [ ] empty , . = += -= ++ -- int char float + - * / CONST or and not relop True False ; abstract class public new if while for do else record
S' - S
S - CLASS S
# 类声明
CLASS - CLASS_QUALIFIER class { P }
CLASS_QUALIFIER - abstract
CLASS_QUALIFIER - empty
# 类内部语句, P 就是正常的代码块
P - empty
P - P' P
P' - PROCESS
P' - RECORD
P' - DECLARE ;
P' - ASSIGNMENT ;
# 过程
PROCESS - PROCESS_QUALIFIER TYPE ID ( PARAMS ) { P }
PROCESS_QUALIFIER - public
PARAMS - empty
PARAMS - PARAMS PARAMS'
PARAMS' - EXPRESSION
# 声明，包括赋初值与不赋初值的情况.不支持嵌套定义对象，但是支持嵌套定义函数
# java数组定义中要求前面的类型与后面的new的对象类型要是相同的列表，但是我觉得那应该是语法分析的内容
DECLARE - DECLARE_VALUE
DECLARE - DECLARE_NO_VALUE
DECLARE_NO_VALUE - TYPE ID
DECLARE_VALUE - TYPE ID = ASSIGN
ASSIGN - new ID ( PARAMS )
ASSIGN - EXPRESSION
TYPE - BASIC_TYPE LIST_TYPE
BASIC_TYPE - int
BASIC_TYPE - float
BASIC_TYPE - char
BASIC_TYPE - ID
LIST_TYPE - [ ] LIST_TYPE
LIST_TYPE - empty
# 记录
RECORD - record ID { DECLARES } ;
DECLARES - DECLARE ; DECLARES
DECLARES - DECLARE ;
# 赋值
ASSIGNMENT - V_ID = ASSIGN
ASSIGNMENT - V_ID += EXPRESSION
ASSIGNMENT - V_ID -= EXPRESSION
ASSIGNMENT - V_ID ++
ASSIGNMENT - V_ID --
# A_EXPRESSION 是有值的表达式
# STATEMENT_BOOL 是布尔值表达式
# STATEMENT_CONST 是常量表达式
# 表达式求值。
EXPRESSION - EXPRESSION + EXPRESSION1
EXPRESSION - EXPRESSION - EXPRESSION1
EXPRESSION - EXPRESSION1
EXPRESSION1 - EXPRESSION1 * EXPRESSION2
EXPRESSION1 - EXPRESSION1 / EXPRESSION2
EXPRESSION1 - EXPRESSION2
EXPRESSION2 - ( EXPRESSION )
EXPRESSION2 - - EXPRESSION2
EXPRESSION2 - + EXPRESSION2
EXPRESSION - CONST
EXPRESSION - V_ID
EXPRESSION - CALL
# V_ID 为任何有值的变量
# ID 为单个的标识符
# 变量的构成
#V_ID - ID ID1
#ID1 - empty
#ID1 - ID
#ID1 - . ID1
#ID1 - [ EXPRESSION ] ID1
V_ID - ID1 . V_ID
V_ID - ID1
ID1 - ID1 [ EXPRESSION ]
ID1 - ID
STATEMENT_BOOL - STATEMENT_BOOL or STATEMENT_BOOL'
STATEMENT_BOOL - STATEMENT_BOOL'
STATEMENT_BOOL' - STATEMENT_BOOL' and STATEMENT_BOOL''
STATEMENT_BOOL' - STATEMENT_BOOL''
STATEMENT_BOOL'' - not STATEMENT_BOOL''
STATEMENT_BOOL'' - ( STATEMENT_BOOL )
STATEMENT_BOOL - EXPRESSION relop EXPRESSION
STATEMENT_BOOL - True
STATEMENT_BOOL - False
# 语句
IF - if ( STATEMENT_BOOL ) { P } ELSE
ELSE - else if ( STATEMENT_BOOL ) { P } ELSE
ELSE - else { P }
ELSE - empty
WHILE - while ( STATEMENT_BOOL ) { P }
DO_WHILE - do { P } while ( STATEMENT_BOOL ) ;
FOR - for ( DECLARE_VALUE ; STATEMENT_BOOL ; ASSIGNMENT ) { P }
# 过程调用
CALL - ID ( PARAMS )