ppt第2页
	我们的系统主要实现了4个功能，其中利用FA转换表进行词法分析的部分是我们的核心功能，其余都是实现的附加功能。在这里，我们主要对设计的核心思想进行演示
	
ppt第3页
	这是我们的系统的核心结构。(点一下说一段)
	-最核心的功能，就是读取FA转换表，然后根据转换表，对词法进行分析，生成Token序列
	-此外，我们实现了一个附加功能，可以通过读取正则表达式直接生成NFA，句法分析是用LR(1)实现的
	-我们实现的另一个附加功能是子集构造法。我们可以通过子集构造法对上一个功能生成的NFA进行构造，最后得到DFA与FA转换表，可以直接用于我们的词法分析，也可以写入到文件中
	-最后，在词法分析中，我们实现了恐慌模式错误恢复功能
	
ppt第4页
	首先演示词法分析部分的功能
	词法分析的基本过程是通过FA转换表，对字符序列进行读取，生成Token序列。我们重点说一下我们对于最长子串匹配原则的实现。
	-为了实现最长子串匹配原则，我们设置了几个变量，其中最主要的就是content_stack与backup_stack.
	(按照ppt念)
	
ppt第5，6页
	接下来演示一下我们的恐慌模式错误恢复是如何实现的。
	由前面最长子串匹配原则的实现可知，我们使用记录着上一个可能的接收状态，以备不时之需。
	在情况1，当我们遇到一个自动机在当前状态无法接收的符号，而在我们处理过的字符序列中，存在一个接收状态时，我们直接接收那个状态即可
	
	在情况2，遇到一个无法接收的符号时，我们发现，还没有遇到过一个可接受的符号。在这种情况下，自动机既无法回退，也无法前进，也就是遇到了词法错误。
	我们的实现是，从输入中不断丢弃状态并继续进行探索，直到遇到一个可接收状态

ppt7页
	对正则表达式进行句法分析是我们实现的额外功能。我们实现了LR(1)的分析方法
	
ppt8页
	我们通过对正则表达式的句法分析树进行前序遍历，用ppt上的这个方法，递归的构建自动机。右边是构建所使用的代码
	
ppt9页
		（照着念就行）

ppt10页
	这是我们对NFA进行子集构造法的大概实现（照着念）

	