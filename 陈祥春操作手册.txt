所要使用的文件：
FA目录下的java_fa.dfa与py_fa.dfa，其它的dfa文件可以用，但是没必要

Lex_source目录下，
	java/
		test.java 是对各类符号识别的一个演示
		error.java 是对词法错误识别的演示
		Client.java 是一个完整的java代码，用来演示完整性
		
	python/
		LexicalAnalysis.py 就是我们词法分析器本身的代码
		
====================操作从这里开始=====================
1，运行gui，首先介绍一下我们的程序的逻辑：
	我们的程序可以动态输入FA转换表与待分析代码，实现对不同语言，使用不同词法的分析
	我们一边运行一边介绍gui中各个部分的作用
	
	-词法分析的基础是FA转换表，因此我们先读取一个FA转换表。（点击左侧的读取转换表按钮）这个按钮就是用来读取FA转换表的。
	-打开FA目录。我们为不同的编程语言都设计了文法，这里先演示java的文法。（加载java_fa.dfa
	）
	-打开显示FA转换表的卡片。这里就是读取进来的FA转换表，竖的是状态，横的则表示不同的输入符号。由于我们设计了很多词法，并使用子集构造法构造出DFA，因此状态数比较多。
	-接下来我们需要读取处理的源代码（点击左侧的读取源代码按钮，先选择test.java）test.java是对我们的词法分析器所能识别的词法的一个总结。（读取进来后，展示显示源代码的卡片）
	-我们也可以对读取进来的源代码进行改动（随便输入几个字符，然后删掉），也可以不读取文件，直接在这里输入待处理的词法。这里为了方便，我们读取一个源代码文件进行测试
	-（点击词法分析按钮，然后按照源代码上的一条一条解释。我在源代码上加了注释的，你照着解释就行）
	-然后演示词法分析器处理错误的功能。点击读取源代码文件，读取error.java
	-先是第一个错误 1E+,注意这是一个错误的浮点数，但是由于我们的词法分析器使用了最长子串匹配原则，所以这里实际的行为是把它匹配成数字1，标识符E和加号
	非法字符会触发报错
	然后分别删掉右双引号，右单引号，右注释符号，展示词法分析器的报错。（一个一个删，删第二个的时候要把第一个加回去）
	
	-然后说我们的还可以切换所使用的FA转换表（点击读取FA转换表功能，选择py_fa.dfa）
	-这里我们读取了python的FA转换表，于是就可以对python进行词法分析了。值得注意的是，python实际的词法分析是要考虑缩进的，所以这里我们只是进行功能上的演示，并不是模拟实际的python1的词法分析过程。
	-然后从lex_source/python里面读取LexicalAnalysis.py源代码。这是我们的实现词法分析的源代码，现在我们用它来对它自己进行词法分析。
	-（然后会报错，我加进去的，这里要演示第三个功能）
	-可以看到这个代码报了许多错误，这个错误是!=符号没有正确识别，所以我们需要对词法进行修改，现在演示我们的词法修改功能
	
	-（左边最下面的按钮，读取词法正则）选择regex/regex_py
	-可以看到这个词法中，！和！=的词法都被注释掉了，因此无法正确识别，所以我们把他改正（去掉#，点击生成FA转换表）大概需要等20秒左右
	-生成完成后，再识别python代码就不会出错了